AWSTemplateFormatVersion: 2010-09-09
Description: 'Template to provison Knowledgebase, data source and sync lambda function'

Parameters:
  KnowledgeBaseName:
    Default: rag-kb
    Type: String
    Description: The name of the knowledge base.
  KnowledgeBaseDescription:
    Default: Answer based only on information contained in knowledge base. 
    Type: String
    Description: The description of the knowledge base.  
  AOSSIndexName:
    Default: rag-readthedocs-io
    Type: String
    Description: Name of the vector index in the Amazon OpenSearch Service Serverless (AOSS) collection.
Resources:
  PermissionForS3BucketToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt KBSync.Arn 
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId      
      SourceArn:  !ImportValue S3BucketARN

  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !ImportValue S3BucketARN
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/customresource-lambda-functions:* 

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Permission to write to CloudWatch logs is part of the managed policy AWSLambdaBasicExecutionRole
          - id: W89
            reason: Lambda function does not interact with resources in the VPC and does not handle sensitive data
          - id: W92
            reason: This lambda function does not require ReservedConcurrentExecutions      
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.12
      Timeout: 50

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: PermissionForS3BucketToInvokeLambda
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt KBSync.Arn
      Bucket: !ImportValue S3BucketName
      
  KBSyncRole:
    Type: AWS::IAM::Role      
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: KBSyncLambdaFunctionAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:         
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            - s3:PutObject
            Resource:
            - !Sub arn:aws:s3:::rag-kb-${AWS::AccountId}
            - !Sub arn:aws:s3:::rag-kb-${AWS::AccountId}/* 
          - Effect: Allow
            Action:
            - bedrock:StartIngestionJob
            - bedrock:ListIngestionJobs
            Resource: !Sub
                - "arn:aws:bedrock:${region}:${account}:knowledge-base/${kbid}"
                - region: !Ref 'AWS::Region'
                  account: !Ref 'AWS::AccountId'
                  kbid: !Ref KnowledgeBaseWithAoss        
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/kbsync-demo-functions:*       
  KBSync:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Permission to write to CloudWatch logs is part of the managed policy AWSLambdaBasicExecutionRole
          - id: W89
            reason: Lambda function does not interact with resources in the VPC and does not handle sensitive data
          - id: W92
            reason: This lambda function does not require ReservedConcurrentExecutions                
    Properties:
      FunctionName: kbsync-demo-functions
      Handler: index.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Runtime: python3.12
      Role: !GetAtt KBSyncRole.Arn
      Code:
        ZipFile: |      
            import os
            import json
            import boto3
            bedrockClient = boto3.client('bedrock-agent')
            def lambda_handler(event, context):
                dataSourceId = os.environ['DATASOURCEID']
                knowledgeBaseId = os.environ['KNOWLEDGEBASEID']
                # Check for in-progress ingestion jobs
                try:
                    list_response = bedrockClient.list_ingestion_jobs(
                        dataSourceId=dataSourceId,
                        knowledgeBaseId=knowledgeBaseId,
                        filters=[
                            {
                                'attribute': 'STATUS',
                                'operator': 'EQ',
                                'values': ['IN_PROGRESS']
                            }
                        ]
                    )
                    # Check if the ingestionJobSummaries list is empty
                    if list_response.get('ingestionJobSummaries'):
                        print('There are ingestion jobs currently in progress.')
                        return {
                            'statusCode': 200,
                            'body': json.dumps('Ingestion job already in progress.')
                        }
                except Exception as e:
                    print('Error checking ingestion jobs: ', str(e))
                    return {
                        'statusCode': 500,
                        'body': json.dumps('Error checking ingestion jobs: ' + str(e))
                    }
                # Start a new ingestion job if no jobs are in progress
                try:
                    response = bedrockClient.start_ingestion_job(
                        knowledgeBaseId=knowledgeBaseId,
                        dataSourceId=dataSourceId
                    )
                    print('Ingestion Job Response: ', response)
                    return {
                        'statusCode': 200,
                        'body': json.dumps('Ingestion job started successfully.')
                    }
                except Exception as e:
                    print('Error starting ingestion job: ', str(e))
                    return {
                        'statusCode': 500,
                        'body': json.dumps('Error starting ingestion job: ' + str(e))
                    }
      Environment:
        Variables:
          KNOWLEDGEBASEID: !Ref KnowledgeBaseWithAoss
          DATASOURCEID: !GetAtt SampleDataSource.DataSourceId 
  KnowledgeBaseWithAoss:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Ref KnowledgeBaseName
      Description: !Ref KnowledgeBaseDescription
      RoleArn: !ImportValue BedrockKBARN
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1"
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !ImportValue CollectionARN
          VectorIndexName: !Ref AOSSIndexName
          FieldMapping:
            VectorField: "vector"
            TextField: "text"
            MetadataField: "metadata"
  SampleDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBaseWithAoss
      Name: !ImportValue S3BucketName
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !ImportValue S3BucketARN

Outputs:
  KBID:
    Value: !Ref KnowledgeBaseWithAoss
    Export:
        Name: KnowledgeBaseID          